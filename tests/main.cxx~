#include <cstdlib>
#include <ctime>
#include <iostream>

/** @todo Inclure les fichiers de définition du problème */

#include "window.hxx"
#include "Ocean.h"
#include "Wave.h"
Ocean *ocean;
int mainwindow;
int main(int argc, char** argv) {
  /** @todo Initialiser des paramètres de simulation */

  /** @todo Initialiser du modèle*/

  /** @todo Initialiser du champ de hauteur */

  /** @todo Initialiser de l'océan */
  // GerstnerWave *gwave1 = new GerstnerWave(2, 0.1);
  // GerstnerWave *gwave2 = new GerstnerWave(3, 0.17);
  // GerstnerWave *gwave3 = new GerstnerWave(1.5, 0.23);
  // GerstnerWave *gwave4 = new GerstnerWave(2.4, 0.15);
  // GerstnerWave *gwave5 = new GerstnerWave(2, 0.3);
  PhilipsWave *pwave1 = new PhilipsWave(20, 1.4);
  PhilipsWave *pwave2 = new PhilipsWave(10, 1.1);
  // PhilipsWave *pwave3 = new PhilipsWave(1.5, 0.23);
  // PhilipsWave *pwave4 = new PhilipsWave(2.4, 0.15);
  // PhilipsWave *pwave5 = new PhilipsWave(2, 0.3);
  double dir[2] = {1, 2};

  //PhilipsWaveModel *model = new PhilipsWaveModel(gwave2, dir, 1.0, 1,1,1);
  //GerstnerWaveModel *gmodel = new GerstnerWaveModel(gwave1, dir, 1, 1, 1, 1);
  PhilipsWaveModel *pmodel = new PhilipsWaveModel(pwave1, dir, 1, 1, 1, 1);
  //gmodel->addGerstnerWave(gwave2);
  // gmodel->addGerstnerWave(gwave3);
  // gmodel->addGerstnerWave(gwave4);
  // gmodel->addGerstnerWave(gwave5);
  pmodel->addPhilipsWave(pwave2);
  // pmodel->addPhilipsWave(pwave3);
  // pmodel->addPhilipsWave(pwave4);
  // pmodel->addPhilipsWave(pwave5);
  ocean = new Ocean(200,200, 64, 64, 1, pmodel, 10.0);


  /* Initialisation de la fenêtre d'affichage */
  Window::init(WIDTH, HEIGHT, "Houle", argc, argv, "AZERTY", 50, 1);

  /* Execute la simulation */
  Window::launch();

  /* Libère la mémoire */

  Window::quit();
  return 0;

}
